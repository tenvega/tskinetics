---
/**
 * Cart Summary Component
 * Displays cart totals and checkout button
 */

export interface Props {
    totalItems: number;
    formattedTotal: string;
}

const { totalItems, formattedTotal } = Astro.props;
---

<div class="cart-summary bg-gray-800/50 p-6 border-t border-gray-700">
    <!-- Subtotal -->
    <div class="flex justify-between items-center mb-6">
        <div>
            <p class="text-gray-400 text-sm">Subtotal</p>
            <p class="text-gray-500 text-xs">
                {totalItems} {totalItems === 1 ? 'item' : 'items'}
            </p>
        </div>
        <p class="text-white text-2xl font-bold">
            {formattedTotal}
        </p>
    </div>

    <!-- Checkout Button -->
    <button
        id="checkout-button"
        class="w-full bg-gradient-to-r from-purple-600 to-purple-800 hover:from-purple-700 hover:to-purple-900 text-white font-bold py-4 px-6 rounded-lg transition-all duration-300 transform hover:scale-105 hover:shadow-lg mb-3 flex items-center justify-center space-x-2"
        data-analytics-event="checkout_clicked"
    >
        <span>Checkout</span>
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
        </svg>
    </button>

    <!-- Continue Shopping Button -->
    <button
        id="continue-shopping-button"
        class="w-full bg-transparent border border-gray-600 text-gray-300 hover:text-white hover:border-white font-semibold py-3 px-6 rounded-lg transition-colors"
        data-analytics-event="continue_shopping_clicked"
    >
        Continue Shopping
    </button>

    <!-- Trust Indicators -->
    <div class="mt-6 pt-6 border-t border-gray-700">
        <div class="flex justify-center items-center space-x-6 text-gray-500 text-xs">
            <span class="flex items-center">
                <svg class="w-3 h-3 mr-1 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                </svg>
                Instant Download
            </span>
            <span class="flex items-center">
                <svg class="w-3 h-3 mr-1 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                </svg>
                Secure Checkout
            </span>
        </div>
    </div>
</div>

<script>
    import { buildCheckoutUrl } from '../../lib/cart';

    document.addEventListener('DOMContentLoaded', () => {
        // Checkout button
        const checkoutButton = document.getElementById('checkout-button');
        if (checkoutButton) {
            checkoutButton.addEventListener('click', () => {
                const checkoutUrl = buildCheckoutUrl();
                
                if (!checkoutUrl) {
                    console.error('No items in cart');
                    return;
                }

                // Visual feedback
                checkoutButton.innerHTML = '<span>Redirecting to Gumroad...</span>';
                checkoutButton.classList.add('opacity-70');
                
                // Redirect to Gumroad checkout
                setTimeout(() => {
                    window.open(checkoutUrl, '_blank');
                    
                    // Reset button after a delay
                    setTimeout(() => {
                        checkoutButton.innerHTML = `
                            <span>Checkout</span>
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
                            </svg>
                        `;
                        checkoutButton.classList.remove('opacity-70');
                    }, 1000);
                }, 300);
            });
        }

        // Continue shopping button
        const continueButton = document.getElementById('continue-shopping-button');
        if (continueButton) {
            continueButton.addEventListener('click', () => {
                // Close cart drawer
                window.dispatchEvent(new CustomEvent('close-cart-drawer'));
            });
        }
    });

    // Re-initialize on page load
    document.addEventListener('astro:page-load', () => {
        // Event listeners are already set up
    });
</script>

