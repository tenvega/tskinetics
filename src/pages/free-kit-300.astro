---
import Layout from "../layouts/Layout.astro";
import { fetchProducts } from "../lib/gumroad";
import type { GumroadProduct } from "../lib/types";
import fs from "fs";
import path from "path";
import BuyNowButton from "../components/ui/BuyNowButton.astro";

let products: GumroadProduct[] = [];
let freeProduct: GumroadProduct | null = null;
let audioFiles: any[] = [];

// Helper to generate slug from product name (same as gumroad.ts)
function generateSlug(name: string): string {
	return name
		.toLowerCase()
		.replace(/[^a-z0-9]+/g, "-")
		.replace(/^-+|-+$/g, "")
		.replace(/-{2,}/g, "-")
		.trim();
}

// Helper to get audio files for a slug
function getAudioFilesForSlug(slug: string) {
	const folderPath = path.join(process.cwd(), "public", "audio", slug);
	if (!fs.existsSync(folderPath)) return [];
	return fs
		.readdirSync(folderPath)
		.filter((f) => f.match(/\.(mp3|wav|flac|aiff|m4a)$/i))
		.map((filename) => ({
			name: filename
				.replace(/\.(mp3|wav|flac|aiff|m4a)$/i, "")
				.replace(/[_-]/g, " ")
				.replace(/\s+/g, " ")
				.trim(),
			path: `/audio/${slug}/${filename}`,
		}));
}

try {
	products = await fetchProducts(100);
	// Find the free product (price = 0 or contains "intro" or "free" in name)
	freeProduct =
		products.find(
			(product) =>
				product.price === 0 ||
				product.title.toLowerCase().includes("intro") ||
				product.title.toLowerCase().includes("free") ||
				product.name?.toLowerCase().includes("intro") ||
				product.name?.toLowerCase().includes("free"),
		) || null;

	if (freeProduct) {
		const slug = freeProduct.slug || generateSlug(freeProduct.title);
		audioFiles = getAudioFilesForSlug(slug);
	}
} catch (e) {
	console.error("Error fetching products:", e);
}

// Helper function to format duration (will be updated with real duration via JS)
function formatDuration(filename: string): string {
	return "--:--";
}
---

<Layout title="TSK Intro Kit 300+ - Free Sound Pack">
	<!-- TSK Intro Kit Section -->
	<section
		id="main-content"
		class="py-20 text-white relative z-10 min-h-screen"
		style="background: linear-gradient(120deg, #0f1419 0%, #0a0a0a 100%);"
	>
		<div class="max-w-6xl mx-auto px-4">
			<!-- Header Section -->
			<div class="text-center mb-12">
				<p
					class="text-blue-400 text-lg font-medium mb-4 tracking-wider"
				>
					EXPERIENCE OUR SIGNATURE SOUND
				</p>
				<h1
					class="text-5xl md:text-7xl font-bold text-white mb-6 leading-tight"
				>
					{
						freeProduct
							? freeProduct.title.toUpperCase()
							: "TSK INTRO KIT"
					}
					<span class="text-blue-400">300+</span>
				</h1>
				<p
					class="text-xl text-gray-300 mb-8 max-w-3xl mx-auto leading-relaxed"
				>
					Get started with our massive collection of premium sounds.
					This exclusive free kit includes 300+ carefully crafted drum
					hits, melodic loops, and signature presets.
				</p>
			</div>

			<!-- Main Content Grid -->
			<div
				class="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center mb-16"
			>
				<!-- Kit Image -->
				<div class="order-1 lg:order-1">
					<div class="relative">
						<img
							id="cover-art"
							src={freeProduct?.thumbnail_url ||
								freeProduct?.cover_url ||
								"/images/threehundred_free.jpg"}
							alt="TSK Intro Kit 300+ - Free Sound Pack"
							class="w-full max-w-lg mx-auto rounded-2xl shadow-2xl border border-blue-500/20"
						/>
						<!-- Floating Stats -->
						<div
							class="absolute -top-4 -right-4 bg-blue-600 text-white px-4 py-2 rounded-full font-bold shadow-lg"
						>
							FREE
						</div>
						<div
							class="absolute -bottom-4 -left-4 bg-gray-800/90 backdrop-blur-sm text-blue-400 px-4 py-2 rounded-full font-bold shadow-lg border border-blue-500/30"
						>
							300+ Sounds
						</div>
					</div>
				</div>

				<!-- Download Section -->
				<div class="order-2 lg:order-2">
					<div
						class="bg-gray-800/50 backdrop-blur-md rounded-2xl p-8 border border-gray-700/50 shadow-xl"
					>
						<h2
							class="text-3xl font-bold text-white mb-6 text-center"
						>
							Download Your Free Kit
						</h2>
						<div
							class="flex justify-center items-center gap-8 mb-8"
						>
							<div class="text-center">
								<div
									class="text-2xl font-bold text-blue-400 mb-1"
								>
									300+
								</div>
								<div class="text-sm text-gray-400">Sounds</div>
							</div>
							<div class="w-px h-12 bg-gray-600"></div>
							<div class="text-center">
								<div
									class="text-2xl font-bold text-blue-400 mb-1"
								>
									FREE
								</div>
								<div class="text-sm text-gray-400">
									Download
								</div>
							</div>
						</div>
						{
							freeProduct && (
								<BuyNowButton
									productId={freeProduct.id}
									productTitle={freeProduct.title}
									price={freeProduct.price}
									productUrl={freeProduct.url}
									formattedPrice={freeProduct.formatted_price}
								/>
							)
						}
						<div class="mt-6 text-center">
							<div
								class="flex justify-center items-center space-x-6 text-gray-500 text-xs"
							>
								<span class="flex items-center"
									><svg
										class="w-3 h-3 mr-1 text-green-500"
										fill="currentColor"
										viewBox="0 0 20 20"
										><path
											fill-rule="evenodd"
											d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
											clip-rule="evenodd"></path></svg
									>Instant Download</span
								>
								<span class="flex items-center"
									><svg
										class="w-3 h-3 mr-1 text-green-500"
										fill="currentColor"
										viewBox="0 0 20 20"
										><path
											fill-rule="evenodd"
											d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
											clip-rule="evenodd"></path></svg
									>Commercial License</span
								>
								<span class="flex items-center"
									><svg
										class="w-3 h-3 mr-1 text-green-500"
										fill="currentColor"
										viewBox="0 0 20 20"
										><path
											fill-rule="evenodd"
											d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
											clip-rule="evenodd"></path></svg
									>100% Royalty Free</span
								>
							</div>
						</div>
					</div>
				</div>
			</div>

			<!-- Audio Player Section -->
			{
				audioFiles.length > 0 && (
					<div class="mb-16">
						<div class="mb-8">
							<div class="flex items-center gap-4 mb-6">
								<button
									id="play-all-btn"
									class="w-12 h-12 bg-[#151515] hover:bg-gray-900 rounded-full flex items-center justify-center transition-all duration-200 transform hover:scale-105 shadow-lg aspect-square"
								>
									<svg
										class="w-4 h-4 text-white"
										fill="currentColor"
										viewBox="0 0 24 24"
										style="margin-left: 2px;"
									>
										<path d="M8 5v14l11-7z" />
									</svg>
								</button>
								<h2 class="text-3xl font-bold text-white">
									Preview Samples
								</h2>
							</div>
						</div>
						<div class="bg-black/20 rounded-lg overflow-hidden">
							<div class="grid grid-cols-12 gap-4 px-6 py-3 text-xs font-medium text-gray-400 uppercase tracking-wide border-b border-gray-700/50">
								<div class="col-span-1 text-center">#</div>
								<div class="col-span-7">Title</div>
								<div class="col-span-2">Pack</div>
								<div class="col-span-2 text-right">
									Duration
								</div>
							</div>
							<div class="sample-list">
								{audioFiles
									.slice(0, 8)
									.map((audioFile, index) => (
										<div
											class="sample-row grid grid-cols-12 gap-4 px-6 py-3 hover:bg-white/5 transition-colors cursor-pointer group"
											data-audio-src={audioFile.path}
										>
											<div class="col-span-1 flex items-center justify-center">
												<span class="track-number text-gray-400 text-sm group-hover:hidden">
													{index + 1}
												</span>
												<button class="play-btn hidden group-hover:flex w-8 h-8 flex-shrink-0 bg-white rounded-full items-center justify-center hover:scale-105 transition-transform">
													<svg
														class="w-4 h-4 text-black ml-0.5 flex-shrink-0"
														fill="currentColor"
														viewBox="0 0 24 24"
													>
														<path d="M8 5v14l11-7z" />
													</svg>
												</button>
											</div>
											<div class="col-span-7 flex items-center gap-3">
												<div class="w-10 h-10 rounded overflow-hidden bg-gray-700 flex-shrink-0">
													<img
														src={
															freeProduct?.thumbnail_url ||
															freeProduct?.cover_url ||
															"/images/threehundred_free.jpg"
														}
														alt={audioFile.name}
														class="w-full h-full object-cover"
													/>
												</div>
												<div>
													<div class="text-white font-medium text-sm">
														{audioFile.name}
													</div>
												</div>
											</div>
											<div class="col-span-2 flex items-center">
												<span class="text-gray-400 text-sm">
													Free Kit
												</span>
											</div>
											<div class="col-span-2 flex items-center justify-end">
												<span
													class="duration-display text-gray-400 text-sm"
													data-audio-src={
														audioFile.path
													}
												>
													{formatDuration(
														audioFile.filename,
													)}
												</span>
											</div>
										</div>
									))}
							</div>
						</div>
					</div>
				)
			}
		</div>
	</section>

	<audio id="audio-player" preload="none"></audio>

	<script>
		document.addEventListener("DOMContentLoaded", function () {
			const audioPlayer = document.getElementById(
				"audio-player",
			) as HTMLAudioElement | null;
			const playAllBtn = document.getElementById("play-all-btn");
			const sampleRows = document.querySelectorAll(".sample-row");
			const playButtons = document.querySelectorAll(".play-btn");
			const durationDisplays =
				document.querySelectorAll(".duration-display");
			let currentPlayingRow: HTMLElement | null = null;
			let currentTrackIndex = -1;
			let isPlaying = false;
			let audioFiles: { src: string; index: number; row: HTMLElement }[] =
				[];
			let durationsLoaded = false;

			// Extract audio files data from the page
			sampleRows.forEach((row, index) => {
				const audioSrc = (row as HTMLElement).getAttribute(
					"data-audio-src",
				);
				if (audioSrc) {
					audioFiles.push({
						src: audioSrc,
						index: index,
						row: row as HTMLElement,
					});
				}
			});

			// Function to load real audio durations
			function loadAudioDurations() {
				if (durationsLoaded) return;
				let loadedCount = 0;
				const totalCount = durationDisplays.length;
				durationDisplays.forEach((display, index) => {
					const audioSrc = (display as HTMLElement).getAttribute(
						"data-audio-src",
					);
					if (!audioSrc) {
						loadedCount++;
						return;
					}
					const tempAudio = new Audio();
					tempAudio.preload = "metadata";
					tempAudio.crossOrigin = "anonymous";
					const handleMetadata = () => {
						const duration = tempAudio.duration;
						if (isNaN(duration) || !isFinite(duration)) {
							(display as HTMLElement).textContent = "--:--";
						} else {
							const minutes = Math.floor(duration / 60);
							const seconds = Math.floor(duration % 60);
							const formattedDuration = `${minutes}:${seconds.toString().padStart(2, "0")}`;
							(display as HTMLElement).textContent =
								formattedDuration;
						}
						loadedCount++;
						if (loadedCount === totalCount) {
							durationsLoaded = true;
						}
					};
					const handleError = () => {
						(display as HTMLElement).textContent = "--:--";
						loadedCount++;
						if (loadedCount === totalCount) {
							durationsLoaded = true;
						}
					};
					tempAudio.addEventListener(
						"loadedmetadata",
						handleMetadata,
					);
					tempAudio.addEventListener("error", handleError);
					tempAudio.addEventListener("abort", handleError);
					tempAudio.src = audioSrc;
				});
			}

			function updatePlayButton(button: Element, isPlaying: boolean) {
				const svg = button.querySelector("svg");
				if (svg) {
					if (isPlaying) {
						svg.innerHTML =
							'<path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>';
					} else {
						svg.innerHTML = '<path d="M8 5v14l11-7z"/>';
					}
				}
			}

			function updatePlayAllButton(isPlaying: boolean) {
				const svg = playAllBtn?.querySelector("svg");
				if (svg) {
					if (isPlaying) {
						svg.innerHTML =
							'<path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>';
					} else {
						svg.innerHTML = '<path d="M8 5v14l11-7z"/>';
					}
				}
			}

			function resetAllPlayButtons() {
				playButtons.forEach((btn) => updatePlayButton(btn, false));
				updatePlayAllButton(false);
			}

			function playTrack(index: number) {
				if (index < 0 || index >= audioFiles.length) return;
				if (!audioPlayer) return;
				const audioFile = audioFiles[index];
				currentTrackIndex = index;
				currentPlayingRow = audioFile.row;
				sampleRows.forEach((row) =>
					(row as HTMLElement).classList.remove("bg-gray-900/30"),
				);
				resetAllPlayButtons();
				audioFile.row.classList.add("bg-gray-900/30");
				const playBtn = audioFile.row.querySelector(".play-btn");
				if (playBtn) updatePlayButton(playBtn, true);
				updatePlayAllButton(true);
				audioPlayer.src = audioFile.src;
				audioPlayer
					.play()
					.then(() => {
						isPlaying = true;
					})
					.catch((error) => {
						resetAllPlayButtons();
						currentPlayingRow?.classList.remove("bg-gray-900/30");
					});
			}

			function togglePlayPause() {
				if (!audioPlayer) return;
				if (currentTrackIndex === -1) {
					playTrack(0);
				} else {
					if (isPlaying) {
						audioPlayer.pause();
					} else {
						audioPlayer.play();
					}
				}
			}

			function nextTrack() {
				if (currentTrackIndex < audioFiles.length - 1) {
					playTrack(currentTrackIndex + 1);
				}
			}

			playAllBtn?.addEventListener("click", togglePlayPause);
			sampleRows.forEach((row, index) => {
				const playBtn = row.querySelector(".play-btn");
				playBtn?.addEventListener("click", (e) => {
					e.stopPropagation();
					if (!audioPlayer) return;
					if (currentTrackIndex === index && isPlaying) {
						audioPlayer.pause();
					} else {
						playTrack(index);
					}
				});
				row.addEventListener("click", () => {
					if (!audioPlayer) return;
					if (currentTrackIndex === index && isPlaying) {
						audioPlayer.pause();
					} else {
						playTrack(index);
					}
				});
			});
			audioPlayer?.addEventListener("play", () => {
				isPlaying = true;
				if (currentPlayingRow) {
					const playBtn =
						currentPlayingRow.querySelector(".play-btn");
					if (playBtn) updatePlayButton(playBtn, true);
				}
				updatePlayAllButton(true);
			});
			audioPlayer?.addEventListener("pause", () => {
				isPlaying = false;
				if (currentPlayingRow) {
					const playBtn =
						currentPlayingRow.querySelector(".play-btn");
					if (playBtn) updatePlayButton(playBtn, false);
				}
				updatePlayAllButton(false);
			});
			audioPlayer?.addEventListener("ended", () => {
				nextTrack();
			});
			document.addEventListener("keydown", (e) => {
				if (e.code === "Space" && e.target === document.body) {
					e.preventDefault();
					togglePlayPause();
				}
			});
			loadAudioDurations();
		});
	</script>

	<style>
		.sample-row {
			border-bottom: 1px solid rgba(255, 255, 255, 0.05);
		}

		.sample-row:last-child {
			border-bottom: none;
		}

		.sample-row:hover .track-number {
			display: none;
		}

		.sample-row:hover .play-btn {
			display: flex;
		}

		.play-btn {
			display: none;
		}

		.sample-row.bg-gray-900\/30 .play-btn {
			display: flex;
		}

		.sample-row.bg-gray-900\/30 .track-number {
			display: none;
		}
	</style>
</Layout>
