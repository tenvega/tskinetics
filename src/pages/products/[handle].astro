---
export const prerender = true;

import Layout from '../../layouts/Layout.astro';
import { fetchProductById, fetchProducts } from '../../lib/gumroad';
import BuyNowButton from '../../components/ui/BuyNowButton.astro';
import AddToCartButton from '../../components/cart/AddToCartButton.astro';
import type { GumroadProduct } from '../../lib/types';

import fs from 'fs';
import path from 'path';

// Helper to clean markdown and HTML from text
function cleanText(text: string): string {
  if (!text) return '';
  return text
    .replace(/<[^>]*>/g, '') // Remove HTML tags
    .replace(/\*\*(.*?)\*\*/g, '$1') // Remove markdown bold
    .replace(/\*(.*?)\*/g, '$1') // Remove markdown italic
    .replace(/\[(.*?)\]\(.*?\)/g, '$1') // Remove markdown links
    .replace(/#{1,6}\s*/g, '') // Remove markdown headers
    .replace(/`([^`]*)`/g, '$1'); // Remove markdown code backticks
}

// Helper to format duration (will be updated with real duration via JS)
function formatDuration(filename: string): string {
  return '--:--';
}

// Helper to get audio files for a slug
function getAudioFilesForSlug(slug: string) {
  const folderPath = path.join(process.cwd(), 'public', 'audio', slug);
  if (!fs.existsSync(folderPath)) return [];
  return fs.readdirSync(folderPath)
    .filter(f => f.match(/\.(mp3|wav|flac|aiff|m4a)$/i))
    .map(filename => ({
      name: filename.replace(/\.(mp3|wav|flac|aiff|m4a)$/i, '').replace(/[_-]/g, ' ').replace(/\s+/g, ' ').trim(),
      path: `/audio/${slug}/${filename}`
    }));
}

const { handle } = Astro.params;
if (!handle) throw new Error('Product handle (slug) is required');

let product: GumroadProduct | null = null;
let relatedProducts: GumroadProduct[] = [];
let audioFiles: any[] = [];
let error: string | null = null;

try {
  // Find the product by slug
  const allProducts = await fetchProducts(100);
  product = allProducts.find(p => p.slug === handle) || null;

  if (!product) {
    // Try fallback: maybe handle is a product ID
    product = allProducts.find(p => p.id === handle) || null;
  }

  if (!product) {
    return Astro.redirect('/404');
  }

  // Load audio files if a folder exists for this slug
  audioFiles = getAudioFilesForSlug(product.slug!);

  // Fetch related products (other products from the same seller) - randomized selection
  const availableProducts = allProducts.filter(p => p.id !== product!.id);
  for (let i = availableProducts.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [availableProducts[i], availableProducts[j]] = [availableProducts[j], availableProducts[i]];
  }
  relatedProducts = availableProducts.slice(0, 4);

  console.log(`Successfully fetched/created product: ${product!.title}`);
} catch (e) {
  error = e instanceof Error ? e.message : 'Failed to fetch product';
  console.error('Error fetching product:', e);
}

let cleanDescription = product && product.description ? cleanText(product.description) : '';
let truncatedDescription = cleanDescription.length > 160 ? cleanDescription.slice(0, 160) + '...' : cleanDescription;

// Generate static paths for all products with proper slugs
export async function getStaticPaths() {
  try {
    const paths = [];
    const products = await fetchProducts(100);
    for (const product of products) {
      if (product.slug) {
        paths.push({ params: { handle: product.slug } });
      }
      // Also add the product ID as a fallback path for backwards compatibility
      paths.push({ params: { handle: product.id } });
    }
    console.log(`Generated ${paths.length} static paths for products`);
    return paths;
  } catch (error) {
    console.error('Error generating static paths:', error);
    return [];
  }
}
---

<Layout title={product?.title || 'Product Not Found'}>
  <main id="main-content" class="min-h-screen text-white">
    <!-- Error Display -->
    {error && (
      <div class="max-w-6xl mx-auto pt-20 px-6">
        <div class="bg-red-900/50 border border-red-700 text-red-300 px-6 py-4 rounded-xl">
          <strong>Error:</strong> {error}
        </div>
      </div>
    )}

    {product && (
      <>
        <!-- Product Header Section -->
        <div class="pt-20 pb-8 px-6">
          <div class="max-w-6xl mx-auto">
            <div class="flex flex-col lg:flex-row gap-8 items-center lg:items-end">
              <!-- Product Artwork -->
              <div class="w-full max-w-xs aspect-square flex-shrink-0 mx-auto lg:mx-0 lg:w-60 lg:h-60">
                <div class="w-full h-full rounded-lg overflow-hidden bg-gray-800 shadow-2xl">
                  {product.preview_url || product.thumbnail_url || product.cover_url ? (
                    <img 
                      id="cover-img"
                      src={product.preview_url || product.thumbnail_url || product.cover_url}
                      alt={product.title}
                      class="w-full h-full object-cover"
                      loading="eager"
                    />
                  ) : (
                    <div class="w-full h-full flex items-center justify-center text-gray-400">
                      <div class="text-center">
                        <div class="text-6xl mb-4">ðŸŽµ</div>
                        <span class="text-sm">No image available</span>
                      </div>
                    </div>
                  )}
                </div>
              </div>

              <!-- Product Metadata -->
              <div class="flex-1 space-y-4 text-center lg:text-left">
                <!-- Product Type -->
                <div class="text-sm font-medium text-gray-300 uppercase tracking-wide">
                  Sample Pack
                </div>

                <!-- Product Title -->
                <h1 class="text-4xl md:text-6xl lg:text-7xl font-black text-white leading-tight">
                  {product.title}
                </h1>

                <!-- Product Info -->
                <div class="flex items-center gap-1 text-sm text-gray-300">
                  <span class="font-medium text-white">TSK</span>
                  <span>â€¢</span>
                  <span>{product.formatted_price}</span>
                </div>

                <!-- Description -->
                {product.description && (
                  <div class="text-gray-300 text-sm max-w-2xl leading-relaxed text-left">
                    <div id="description-outer" style="overflow: hidden; transition: max-height 0.4s cubic-bezier(0.4,0,0.2,1); will-change: max-height;">
                      <div id="description-text" data-full-text={cleanDescription} data-truncated-text={truncatedDescription}>{truncatedDescription}</div>
                    </div>
                    {cleanDescription.length > 160 && (
                      <button id="description-toggle" class="text-white hover:text-gray-300 ml-2 underline mt-2 block">
                        View More
                      </button>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>

        <!-- Controls Section -->
        <div class="px-6 pb-8">
          <div class="max-w-6xl mx-auto">
            <div class="flex flex-col md:flex-row items-stretch md:items-center gap-4">
              <!-- Play All Button -->
              <button id="play-all-btn" class="w-14 h-14 bg-white hover:bg-gray-100 rounded-full flex items-center justify-center transition-all duration-200 transform hover:scale-105 shadow-lg aspect-square flex-shrink-0">
                <svg class="w-5 h-5 text-black" fill="currentColor" viewBox="0 0 24 24" style="margin-left: 2px;">
                  <path d="M8 5v14l11-7z"/>
                </svg>
              </button>

              <!-- Button Group -->
              <div class="flex-1 flex flex-col md:flex-row gap-4">
                <!-- Add to Cart Button -->
                <div class="flex-1">
                  <AddToCartButton 
                    productId={product.id}
                    productTitle={product.title}
                    price={product.price}
                    productUrl={product.url}
                    formattedPrice={product.formatted_price}
                    thumbnailUrl={product.thumbnail_url}
                    variant="secondary"
                  />
                </div>

                <!-- Buy Now Button (Direct Checkout) -->
                <div class="flex-1">
                  <BuyNowButton 
                    productId={product.id}
                    productTitle={product.title}
                    price={product.price}
                    productUrl={product.url}
                    formattedPrice={product.formatted_price}
                  />
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Sample List Section -->
        <div class="px-6 pb-12">
          <div class="max-w-6xl mx-auto">
            {audioFiles.length > 0 ? (
              <div class="bg-black/20 rounded-lg overflow-hidden">
                <!-- Table Header -->
                <div class="grid grid-cols-12 gap-4 px-6 py-3 text-xs font-medium text-gray-400 uppercase tracking-wide border-b border-gray-700/50">
                  <div class="col-span-1 text-center">#</div>
                  <div class="col-span-6">Title</div>
                  <div class="col-span-3">Pack</div>
                  <div class="col-span-2 text-right">Duration</div>
                </div>

                <!-- Sample Rows -->
                <div class="sample-list">
                  {audioFiles.map((audioFile, index) => (
                    <div class="sample-row grid grid-cols-12 gap-4 px-6 py-3 hover:bg-white/5 transition-colors cursor-pointer group" data-audio-src={audioFile.path}>
                      <!-- Track Number / Play Button -->
                      <div class="col-span-1 flex items-center justify-center">
                        <span class="track-number text-gray-400 text-sm group-hover:hidden">{index + 1}</span>
                        <button class="play-btn hidden group-hover:flex w-8 h-8 flex-shrink-0 bg-white rounded-full items-center justify-center hover:scale-105 transition-transform">
                          <svg class="w-4 h-4 text-black ml-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M8 5v14l11-7z"/>
                          </svg>
                        </button>
                      </div>

                      <!-- Track Info -->
                      <div class="col-span-6 flex items-center gap-3">
                        <div class="w-10 h-10 rounded overflow-hidden bg-gray-700 flex-shrink-0">
                          {product.preview_url || product.thumbnail_url || product.cover_url ? (
                            <img 
                              src={product.preview_url || product.thumbnail_url || product.cover_url}
                              alt={audioFile.name}
                              class="w-full h-full object-cover"
                            />
                          ) : (
                            <div class="w-full h-full flex items-center justify-center">
                              <svg class="w-5 h-5 text-gray-400" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M12 3v10.55c-.59-.34-1.27-.55-2-.55-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4V7h4V3h-6z"/>
                              </svg>
                            </div>
                          )}
                        </div>
                        <div>
                          <div class="text-white font-medium text-sm">{audioFile.name}</div>
                        </div>
                      </div>

                      <!-- Pack Name -->
                      <div class="col-span-3 flex items-center">
                        <span class="text-gray-400 text-sm">{product.title}</span>
                      </div>

                      <!-- Duration -->
                      <div class="col-span-2 flex items-center justify-end">
                        <span class="duration-display text-gray-400 text-sm" data-audio-src={audioFile.path}>{formatDuration(audioFile.filename)}</span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            ) : (
              <div class="text-center py-12">
                <div class="text-gray-400 mb-4">No audio samples available for this product</div>
              </div>
            )}
          </div>
        </div>

        <!-- Related Products -->
        {(relatedProducts || []).length > 0 && (
          <div class="px-6 pb-12">
            <div class="max-w-6xl mx-auto">
              <h2 class="text-2xl font-bold text-white mb-8">You might also like</h2>
              <div class="grid grid-cols-2 md:grid-cols-4 gap-6">
                {(relatedProducts || []).map((relatedProduct) => (
                  <a href={`/products/${relatedProduct.slug}`} class="group">
                    <div class="bg-gray-800/50 p-4 rounded-lg hover:bg-gray-700/50 transition-colors">
                      <div class="aspect-square mb-4 overflow-hidden rounded">
                        <img
                          src={relatedProduct.thumbnail_url || relatedProduct.cover_url || "/images/bg.png"}
                          alt={relatedProduct.title}
                          class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                          loading="lazy"
                          onerror="this.src='/images/bg.png';"
                        />
                      </div>
                      <h3 class="text-white font-medium text-sm mb-1 line-clamp-2 h-10 flex items-start">
                        {relatedProduct.title}
                      </h3>
                      <p class="text-gray-400 text-xs">
                        {relatedProduct.formatted_price}
                      </p>
                    </div>
                  </a>
                ))}
              </div>
            </div>
          </div>
        )}
      </>
    )}

    <!-- Hidden Audio Element -->
    <audio id="audio-player" preload="none"></audio>
  </main>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const audioPlayer = document.getElementById('audio-player') as HTMLAudioElement;
      const playAllBtn = document.getElementById('play-all-btn');
      const sampleRows = document.querySelectorAll('.sample-row');
      const playButtons = document.querySelectorAll('.play-btn');
      const mainContent = document.getElementById('main-content');
      const durationDisplays = document.querySelectorAll('.duration-display');
      
      let currentPlayingRow: HTMLElement | null = null;
      let currentTrackIndex = -1;
      let isPlaying = false;
      let audioFiles: any[] = [];
      let durationsLoaded = false;

      // Extract audio files data from the page
      sampleRows.forEach((row, index) => {
        const audioSrc = (row as HTMLElement).getAttribute('data-audio-src');
        if (audioSrc) {
          audioFiles.push({
            src: audioSrc,
            index: index,
            row: row as HTMLElement
          });
        }
      });

      // Function to extract colors from cover art and update gradient
      function updateGradientFromCover() {
        const coverImage = document.getElementById('cover-img') as HTMLImageElement;
        if (!coverImage || !mainContent) {
          console.log('Cover image or main content not found');
          setDefaultGradient();
          return;
        }

        console.log('Extracting colors from:', coverImage.src);

        // Set initial gradient immediately to avoid delay
        setDefaultGradient();

        const extractColors = () => {
          try {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            if (!ctx) {
              setTitleBasedGradient();
              return;
            }

            // Use a reasonable size for color sampling
            canvas.width = 64;
            canvas.height = 64;

            // Try to draw the image directly (works for same-origin images)
            try {
              ctx.drawImage(coverImage, 0, 0, 64, 64);
              
              const imageData = ctx.getImageData(0, 0, 64, 64);
              const data = imageData.data;
              
              // Advanced color analysis
              const colors: { [key: string]: number } = {};
              const brightnesses: number[] = [];
              
              // Sample every 4th pixel for performance
              for (let i = 0; i < data.length; i += 16) {
                const r = data[i];
                const g = data[i + 1];
                const b = data[i + 2];
                const alpha = data[i + 3];
                
                // Skip transparent or very dark pixels
                if (alpha < 200) continue;
                
                const brightness = (r * 0.299 + g * 0.587 + b * 0.114);
                if (brightness < 30) continue;
                
                brightnesses.push(brightness);
                
                // Quantize colors to reduce noise
                const rq = Math.floor(r / 16) * 16;
                const gq = Math.floor(g / 16) * 16;
                const bq = Math.floor(b / 16) * 16;
                
                const colorKey = `${rq},${gq},${bq}`;
                colors[colorKey] = (colors[colorKey] || 0) + 1;
              }
              
              // Find the most frequent color
              let dominantColor = '64,64,64'; // fallback gray
              let maxCount = 0;
              
              Object.entries(colors).forEach(([color, count]) => {
                if (count > maxCount) {
                  maxCount = count;
                  dominantColor = color;
                }
              });
              
              const [r, g, b] = dominantColor.split(',').map(Number);
              
              console.log('Dominant color extracted:', { r, g, b });
              
              // Create sophisticated gradient
              const baseColor = `rgb(${r}, ${g}, ${b})`;
              const brightColor = `rgb(${Math.min(255, r + 60)}, ${Math.min(255, g + 60)}, ${Math.min(255, b + 60)})`;
              const mediumColor = `rgb(${Math.floor(r * 0.7)}, ${Math.floor(g * 0.7)}, ${Math.floor(b * 0.7)})`;
              const darkColor = `rgb(${Math.floor(r * 0.3)}, ${Math.floor(g * 0.3)}, ${Math.floor(b * 0.3)})`;
              
              // Apply gradient immediately
              const gradient = `linear-gradient(to bottom, ${brightColor}, ${baseColor}, ${mediumColor}, ${darkColor}, #000000)`;
              console.log('Applying extracted gradient');
              mainContent.style.background = gradient;
              
            } catch (canvasError) {
              console.warn('Canvas extraction failed:', canvasError);
              setTitleBasedGradient();
            }
            
          } catch (error) {
            console.error('Color extraction error:', error);
            setTitleBasedGradient();
          }
        };

        function setDefaultGradient() {
          // Start with a neutral gradient
          if (mainContent) {
            mainContent.style.background = 'linear-gradient(to bottom, #404040, #2a2a2a, #1a1a1a, #000000)';
          }
        }

        function setTitleBasedGradient() {
          // Fallback: generate colors from product title
          const productTitle = document.querySelector('h1')?.textContent || '';
          let hash = 0;
          for (let i = 0; i < productTitle.length; i++) {
            hash = ((hash << 5) - hash + productTitle.charCodeAt(i)) & 0xffffffff;
          }
          
          const hue = Math.abs(hash) % 360;
          const saturation = 50 + (Math.abs(hash) % 30); // 50-80%
          
          const color1 = `hsl(${hue}, ${saturation}%, 40%)`;
          const color2 = `hsl(${hue}, ${saturation}%, 25%)`;
          const color3 = `hsl(${hue}, ${saturation}%, 15%)`;
          
          console.log('Applying title-based gradient with hue:', hue);
          if (mainContent) {
            mainContent.style.background = `linear-gradient(to bottom, ${color1}, ${color2}, ${color3}, #000000)`;
          }
        }

        // Try immediate extraction if image is ready
        if (coverImage.complete && coverImage.naturalWidth > 0) {
          extractColors();
        } else {
          // Set up listener for when image loads
          const imageLoadHandler = () => {
            extractColors();
            coverImage.removeEventListener('load', imageLoadHandler);
          };
          coverImage.addEventListener('load', imageLoadHandler);
          
          // Fallback after timeout
          setTimeout(() => {
            if (!coverImage.complete) {
              setTitleBasedGradient();
            }
          }, 2000);
        }
      }

      // Function to load real audio durations
      function loadAudioDurations() {
        if (durationsLoaded) return;
        
        console.log('Loading audio durations for', durationDisplays.length, 'files');
        let loadedCount = 0;
        const totalCount = durationDisplays.length;

        durationDisplays.forEach((display, index) => {
          const audioSrc = (display as HTMLElement).getAttribute('data-audio-src');
          if (!audioSrc) {
            console.warn('No audio src found for display', index);
            loadedCount++;
            return;
          }

          console.log('Loading duration for:', audioSrc);
          const tempAudio = new Audio();
          tempAudio.preload = 'metadata';
          tempAudio.crossOrigin = 'anonymous';
          
          const handleMetadata = () => {
            const duration = tempAudio.duration;
            if (isNaN(duration) || !isFinite(duration)) {
              console.warn('Invalid duration for:', audioSrc);
              (display as HTMLElement).textContent = '--:--';
            } else {
              const minutes = Math.floor(duration / 60);
              const seconds = Math.floor(duration % 60);
              const formattedDuration = `${minutes}:${seconds.toString().padStart(2, '0')}`;
              
              console.log('Duration loaded:', audioSrc, formattedDuration);
              (display as HTMLElement).textContent = formattedDuration;
            }
            
            loadedCount++;
            if (loadedCount === totalCount) {
              durationsLoaded = true;
              console.log('All durations loaded');
            }
          };

          const handleError = () => {
            console.error('Error loading audio metadata:', audioSrc);
            (display as HTMLElement).textContent = '--:--';
            loadedCount++;
            
            if (loadedCount === totalCount) {
              durationsLoaded = true;
            }
          };

          tempAudio.addEventListener('loadedmetadata', handleMetadata);
          tempAudio.addEventListener('error', handleError);
          tempAudio.addEventListener('abort', handleError);

          // Set source and start loading
          tempAudio.src = audioSrc;
        });
      }

      function updatePlayButton(button: Element, isPlaying: boolean) {
        const svg = button.querySelector('svg');
        if (svg) {
          if (isPlaying) {
            svg.innerHTML = '<path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>'; // Pause icon
          } else {
            svg.innerHTML = '<path d="M8 5v14l11-7z"/>'; // Play icon
          }
        }
      }

      function updatePlayAllButton(isPlaying: boolean) {
        const svg = playAllBtn?.querySelector('svg');
        if (svg) {
          if (isPlaying) {
            svg.innerHTML = '<path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>'; // Pause icon
          } else {
            svg.innerHTML = '<path d="M8 5v14l11-7z"/>'; // Play icon
          }
        }
      }

      function resetAllPlayButtons() {
        playButtons.forEach(btn => updatePlayButton(btn, false));
        updatePlayAllButton(false);
      }

      function playTrack(index: number) {
        if (index < 0 || index >= audioFiles.length) return;

        const audioFile = audioFiles[index];
        currentTrackIndex = index;
        currentPlayingRow = audioFile.row;

        // Reset all visual states
        sampleRows.forEach(row => row.classList.remove('bg-purple-900/30'));
        resetAllPlayButtons();

        // Update current track visual state
        audioFile.row.classList.add('bg-purple-900/30');
        const playBtn = audioFile.row.querySelector('.play-btn');
        if (playBtn) updatePlayButton(playBtn, true);
        updatePlayAllButton(true);

        // Load and play audio
        audioPlayer.src = audioFile.src;
        audioPlayer.play().then(() => {
          isPlaying = true;
        }).catch(error => {
          console.error('Error playing audio:', error);
          resetAllPlayButtons();
          currentPlayingRow?.classList.remove('bg-purple-900/30');
        });
      }

      function togglePlayPause() {
        if (currentTrackIndex === -1) {
          // Start playing first track
          playTrack(0);
        } else {
          // Toggle current track
          if (isPlaying) {
            audioPlayer.pause();
          } else {
            audioPlayer.play();
          }
        }
      }

      function nextTrack() {
        if (currentTrackIndex < audioFiles.length - 1) {
          playTrack(currentTrackIndex + 1);
        }
      }

      // Event Listeners
      playAllBtn?.addEventListener('click', togglePlayPause);

      // Individual track play buttons
      sampleRows.forEach((row, index) => {
        const playBtn = row.querySelector('.play-btn');
        playBtn?.addEventListener('click', (e) => {
          e.stopPropagation();
          if (currentTrackIndex === index && isPlaying) {
            audioPlayer.pause();
          } else {
            playTrack(index);
          }
        });

        // Row click to play
        row.addEventListener('click', () => {
          if (currentTrackIndex === index && isPlaying) {
            audioPlayer.pause();
          } else {
            playTrack(index);
          }
        });
      });

      // Audio player events
      audioPlayer.addEventListener('play', () => {
        isPlaying = true;
        if (currentPlayingRow) {
          const playBtn = currentPlayingRow.querySelector('.play-btn');
          if (playBtn) updatePlayButton(playBtn, true);
        }
        updatePlayAllButton(true);
      });

      audioPlayer.addEventListener('pause', () => {
        isPlaying = false;
        if (currentPlayingRow) {
          const playBtn = currentPlayingRow.querySelector('.play-btn');
          if (playBtn) updatePlayButton(playBtn, false);
        }
        updatePlayAllButton(false);
      });

      audioPlayer.addEventListener('ended', () => {
        nextTrack();
      });

      // Keyboard shortcuts
      document.addEventListener('keydown', (e) => {
        if (e.code === 'Space' && e.target === document.body) {
          e.preventDefault();
          togglePlayPause();
        }
      });

      // IMPROVED Description toggle logic - smooth both ways
      const descToggle = document.getElementById('description-toggle');
      const descOuter = document.getElementById('description-outer');
      const descText = document.getElementById('description-text');
      const fullText = descText?.getAttribute('data-full-text') || '';
      const truncatedText = descText?.getAttribute('data-truncated-text') || '';
      let descExpanded = false;

      if (descToggle && descOuter && descText) {
        // Set initial state properly
        descText.textContent = truncatedText;
        descOuter.style.maxHeight = descText.scrollHeight + 'px';
        
        descToggle.addEventListener('click', function() {
          if (!descExpanded) {
            // EXPANDING: Calculate target height first
            const currentHeight = descOuter.scrollHeight;
            descText.textContent = fullText;
            const targetHeight = descText.scrollHeight;
            
            // Start from current height
            descOuter.style.maxHeight = currentHeight + 'px';
            
            // Trigger reflow, then animate to target
            requestAnimationFrame(() => {
              descOuter.style.maxHeight = targetHeight + 'px';
            });
            
            descToggle.textContent = 'View Less';
            descExpanded = true;
            
          } else {
            // COLLAPSING: Calculate target height first  
            const currentHeight = descOuter.scrollHeight;
            descText.textContent = truncatedText;
            const targetHeight = descText.scrollHeight;
            
            // Start from current height
            descOuter.style.maxHeight = currentHeight + 'px';
            
            // Trigger reflow, then animate to target
            requestAnimationFrame(() => {
              descOuter.style.maxHeight = targetHeight + 'px';
            });
            
            descToggle.textContent = 'View More';
            descExpanded = false;
          }
        });
      }

      // Always call gradient update on page load
      updateGradientFromCover();
      // Load audio durations for all samples
      loadAudioDurations();
    });
  </script>

  <style>
    .line-clamp-2 {
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .sample-row {
      border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    }

    .sample-row:last-child {
      border-bottom: none;
    }

    .sample-row:hover .track-number {
      display: none;
    }

    .sample-row:hover .play-btn {
      display: flex;
    }

    .play-btn {
      display: none;
    }

    .sample-row.bg-purple-900\/30 .play-btn {
      display: flex;
    }

    .sample-row.bg-purple-900\/30 .track-number {
      display: none;
    }

    /* Enhanced description animation */
    #description-outer {
      transition: max-height 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      will-change: max-height;
    }

    /* Prevent text jumping during transition */
    #description-text {
      transition: none;
    }
  </style>
</Layout>